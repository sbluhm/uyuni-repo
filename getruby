g=$1
if [ ! -z "$2" ]
then
      v="-v $2"
fi
cd ~/rpmbuild/SOURCES
gem fetch $g $v
gem2rpm "$g"*.gem > ~/rpmbuild/SPECS/rubygem-$g.spec;

cd ~/rpmbuild/SPECS
sed -i s/ruby-gems/rubygem/g ~/rpmbuild/SPECS/rubygem-$g.spec
sed -i s'/\["//'g * && sed -i s'/"\]//'g ~/rpmbuild/SPECS/rubygem-$g.spec
sed -i /%doc/d ~/rpmbuild/SPECS/rubygem-$g.spec
sed -i /Source1:/d ~/rpmbuild/SPECS/rubygem-$g.spec
sed -i /'Make sure the spec template is included in the SRPM'/d ~/rpmbuild/SPECS/rubygem-$g.spec
sed -i s"/Provides: ruby(${g^})/Provides: ruby(${g})/" ~/rpmbuild/SPECS/rubygem-$g.spec
sed -i s'/Requires: rubygem /Requires: rubygems /' ~/rpmbuild/SPECS/rubygem-$g.spec
sed -i 's#^%files#%files\n%doc %{gemdir}/doc/%{rbname}-%{version}/#' ~/rpmbuild/SPECS/rubygem-$g.spec  # Insert doc tag in files
sed -i 's#^gem install --local --install-dir %{gembuilddir} --force %{SOURCE0}#gem install --local --user-install --force %{SOURCE0}\nmv $(ruby -r rubygems -e \x27puts Gem.user_dir\x27)/* %{gembuilddir}#' ~/rpmbuild/SPECS/rubygem-$g.spec # Update the gem install tag for copr
sed -i 's#%{gembuilddir}/bin/*#%{gembuilddir}/gems/%{rbname}-%{version}/bin/*#' ~/rpmbuild/SPECS/rubygem-$g.spec # Replace bin dir
sed -i '/rmdir %{gembuilddir}\/gems\/%{rbname}-%{version}\/bin\/*/d' ~/rpmbuild/SPECS/rubygem-$g.spec # remove the original rmdir instruction. Not sure why it doesn't actually work as a bin dir exists...
v=""
sed -i '/%{gemdir}\/gems\/.*\/path/d' ~/rpmbuild/SPECS/rubygem-$g.spec # remove lines with %{gemdir}/gems/*/path
sed -i '$!N; /^\(.*\)\n\1$/!P; D' ~/rpmbuild/SPECS/rubygem-$g.spec # remove consecutive duplicate lines
if (( `gem specification ~/rpmbuild/SOURCES/$g*.gem | grep '\.c$' | wc -l ` > 0 ))
then
sed -i '/^BuildRequires: ruby\b/a BuildRequires: ruby-devel' ~/rpmbuild/SPECS/rubygem-$g.spec # Add ruby-devel after BuildRequires: ruby
sed -i /'BuildArch: noarch'/d ~/rpmbuild/SPECS/rubygem-$g.spec
fi

